=============$ To enable/disable sshd service on rockylinux(redhat/centos) $==================
==============================================================================================
sudo systemctl disable sshd --now
sudo systemctl enable sshd --now

to check the installed software on your host operating system
rpm -qa | grep openssh-server
Example output:
openssh-server-8.0p1-10.el8.x86_64

if not installed, install as follows
sudo dnf install openssh-server

Type Y, then press the ENTER KEY to proceed.

Next, enable the servrice & verify the status of SSH using the following command.
sudo systemctl enable sshd --now
systemctl status sshd

==========$ To install network tools and sshd_config on your host machine $==========
=====================================================================
bash: ifconfig: command not found

Let us see which package provides us ifconfig command using the YUM command.
yum whatprovides ifconfig

[root@localhost vagrant]# yum whatprovides ifconfig
Last metadata expiration check: 0:05:26 ago on Sat 30 Apr 2022 01:12:22 AM UTC.
net-tools-2.0-0.52.20160912git.el8.x86_64 : Basic networking tools
Repo        : baseos
Matched from:
Filename    : /usr/sbin/ifconfig


From the above command, you can see that the net-tools package provides you ifconfig command. Now, install the net-tools package using the yum command.
yum -y install net-tools

Once the installation is complete, then run ifconfig to see whether it is available or not.

error: when ssh vagrant machine session from mobaxterm, getting below error
!!!
No supported authentication methods available (server sent: publickey,gssapi-keyex,gssapi-with-mic)
!!!
solution:
Windows - get PEM key from AWS website and generate PPK file using PuttyGen. Then use Putty to use the PPK (select it using left-column: Connection->SSH->Auth: Private key for authorization)
Linux
 - run: ssh -i your-ssh-key.pem login@IP-or-DNS</p">login@IP-or-DNS>
 
solution:
vi /etc/ssh/sshd_config
In the sshd_config file it said "PasswordAuthentication no". Changing that to "PasswordAuthentication yes" and a restart of sshd solved it for me.
and restart the sshd service.

systemctl status sshd
systemctl restart sshd


==========$ Install nslookup for Centos: $==========
==================================================
[vagrant@DevopsRoles ~]$ sudo yum install bind-utils

==========$ user and group management: $==========
==================================================
it will store in the following files
/etc/passwd
/etc/shadow (will be displayed by root)
/etc/group
/etc/gshadow
/etc/login.defs (which contains an default options of an user)

==========$To change the options for an existing user $==========
=================================================================
$ grep james /etc/passwd
james:X:1002:1002:Golang developer:/home/james:/bin/bash

$ sudo usermod -c "comments for the user" james
$ sudo usermod -g daemon james
$ groups james
output: 
$ james : daemon adm mail sudo

$ sudo groupadd developers
$ sudo groupadd managers
$ sudo usermod -G developers,managers james
$ groups james
output: 
$ james : daemon developers managers

$ sudo usermod -aG sudo james
output: 
$ james : daemon sudo developers managers
==========$To delete user $==========
=====================================
$ sudo userdel gouse
$ grep gouse /etc/passwd
but if you check in /home directory, still the user directory will be present. for this we have to use the option with -r
$ sudo userdel -r gouse

$userdel --> is for backend
$deluser , $delgroup are the friendlier front end for userdel and groupdel

==========$ default admin groups as per distributions: $==========
==================================================================
sudo on ubuntu
wheel on CentOS
when the user is part of this above groups as per distribution, the user can run the admin commands on respective distributions.
==========$To create user with admin privileges $==========
============================================================
$ sudo useradd -m -s /bin/bash gouse
[sudo] password for student:

$grep gouse /etc/passwd
$sudo passwd gouse
new password:
$ su gouse
id
to make the user as admin user
$ sudo usermod -aG sudo gouse
$ su gouse 
and now you can run admin commands.
==========$To create user $==========
=====================================
$ man useradd
$ sudo useradd u1
$ less /etc/default/useradd

$ group u1
u1 : u1
less /etc/login.defs
to create a home direcotry of your user, use the option -m and -d for other username for existing /home
-m : to create a home directory
-d : for other username for existing /home
-c : cooments/description of an user
-s : to define a default shell
-g : to add group to this user
-G : to add other groups to this user
-e : to set the end of the date of user(expire policy)

$ sudo useradd -m -d /home/james -c "DevOps Engineer" -s /bin/bash -G sudo,adm,mail james
make sure to set the password for your created user:
$ passwd james 
 to set the end of the date for the user 
$ sudo useradd -e 2022-06-22 <username>

to set the expire policy for the user
$ sudo chage -l james
$ less /etc/passwd

login attempts restiction
/usr/bin/nologin : it will shows , user account not found.
/bin/false : it will showes the binary error prompt
these above info will be seen in /etc/passwd

difference between in useradd V/s adduser
useradd is recommended
==========$Group Management $==========
=======================================
/etc/group
$ sudo groupadd engineering
$ sudo usermod -aG engineering u3
To change the group name
$ sudo groupmod -n engineerings engineers
$ sudo groupdel engineers

groups are two types:
	1. the primary group: the "id" is stored in /etc/passwd and the "group name" in /etc/group
	2. the secondary group: stored in /etc/group


==========$scheduling a task with anacron $==========
=====================================================
anacron will start your task, even once system rebooted.

==========$Service Management $==========
=========================================
services will be managed by systemd and systemctl

to control the systemd system, we can use the systemctl command.
means to manage systemd system we use systemctl
we can manage our services with systemctl.
$ apt upade && apt install nginx
to know the nginx service status
$ systemctl status nginx.service
here .service suffix is by systemd, even we can run with our application service name without suffix.
$ systemctl status nginx
$ systemctl stop nginx
$ systemctl start nginx
$ systemctl reload nginx
$ systemctl reload-or-restart nginx

To start our nginx service at the boot time
$ systemctl enable nginx

To check our service is enabled at boot startup
$ systemctl is-enabled nginx

to disablenginx service
$ systemctl disable nginx

To enable the nginx not to start at boot time, it will make the service in inactive mode.
$ systemctl mask nginx
$ systemctl status nginx
to make it available
$ systemctl unmask nginx
$ systemctl start nginx
$ systemctl status nginx

$ systemctl list-units
$ systemctl list-units --all

sudo dnf -y install chrony
sudo systemctl enable chronyd

To set the hostname as FQDN
sudo hostnamectl set-hostname git.example.com

To set the timezone
sudo timedatectl list-timezones
sudo timedatectl set-timezone America/New_York
sudo timedatectl set-local-rtc 0
sudo timedatectl set-ntp yes
sudo chronyc sources
Run the timedatectl command without options to check the current status of NTP synchronization.
timedatectl

==========$gitlab installation $==========
==========================================

GitLab Community Edition (CE) – Free to use
GitLab Enterprise Edition (EE) – Requires purchased license to use.

https://computingforgeeks.com/how-to-install-gitlab-on-rocky-linux-8/
https://www.howtoforge.com/how-to-install-gitlab-on-rocky-linux-8/

Step 1: Update Rocky Linux System
1. sudo dnf check-update
2. sudo dnf update -y
3. sudo dnf -y upgrade

Once you have updated your system, you should install the required dependencies. Run the following command to install them.

sudo dnf install -y curl openssh-server policycoreutils perl
sudo systemctl enable --now sshd
sudo dnf -y install postfix
sudo systemctl enable --now postfix
sudo dnf -y install chrony
sudo systemctl enable chronyd

Step 2: Set hostname, timezone and ntp server 
1. sudo hostnamectl set-hostname git.example.com
reffer link on DNS: https://datacadamia.com/os/linux/fqdn 
vi /etc/hosts

2. sudo timedatectl list-timezones
Asia/Riyadh
3. sudo timedatectl set-timezone Asia/Riyadh
4. sudo timedatectl set-local-rtc 0
5. sudo timedatectl set-ntp yes
6. sudo chronyc sources
Run the timedatectl command without options to check the current status of NTP synchronization.

7. timedatectl
You will see the status of your NTP synchronization as shown below.
[root@master vagrant]# timedatectl
               Local time: Tue 2022-05-03 14:11:00 +03
           Universal time: Tue 2022-05-03 11:11:00 UTC
                 RTC time: Tue 2022-05-03 11:11:01
                Time zone: Asia/Riyadh (+03, +0300)
System clock synchronized: yes
              NTP service: active
          RTC in local TZ: no


step 3: Adding GitLab repository

sudo tee /etc/yum.repos.d/gitlab_gitlab-ce.repo<<EOL
[gitlab_gitlab-ce]
name=gitlab_gitlab-ce
baseurl=https://packages.gitlab.com/gitlab/gitlab-ce/el/8/\$basearch
repo_gpgcheck=1
gpgcheck=1
enabled=1
gpgkey=https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey
 https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey/gitlab-gitlab-ce-3D645A26AB9FBD22.pub.gpg
sslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt
metadata_expire=300
EOL

it should return as below:
[gitlab_gitlab-ce]
name=gitlab_gitlab-ce
baseurl=https://packages.gitlab.com/gitlab/gitlab-ce/el/8/$basearch
repo_gpgcheck=1
gpgcheck=1
enabled=1
gpgkey=https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey
 https://packages.gitlab.com/gitlab/gitlab-ce/gpgkey/gitlab-gitlab-ce-3D645A26AB9FBD22.pub.gpg
sslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt
metadata_expire=300

step 4: Enable GitLab CE repository
Now, run the command below to verify whether the GitLab repository has been added or not.
$ sudo dnf repolist
You will see the gitlab_gitlab-ce as repository as shown below.
Next, run the following command to verify if the repository is enabled or not.
$ sudo dnf repolist enabled
$ sudo dnf repolist gitlab_gitlab-ce

Do NOT proceed until you see the gitlab_gitlab-ce repository as enabled. Run the command below to set the repository as enabled.
$ sudo dnf config-manager --set-enabled gitlab_gitlab-ce

step 5: Installing GitLab on Rocky Linux 8.4
Now it's time to install GitLab on your system. Run the following command to do so. Replace gitlab.example.com in the command with your FQDN https://datacadamia.com/os/linux/fqdn.

sudo EXTERNAL_URL="http://gitlab.example.com" dnf install -y gitlab-ce

[root@master vagrant]# hostname --fqdn
git.example.com

$ sudo EXTERNAL_URL="http://git.example.com" dnf install -y gitlab-ce
$ sudo EXTERNAL_URL="http://gitlab.localdomain" yum install -y gitlab-ce
for enterprise eddition
$ sudo EXTERNAL_URL="http://gitlab.localdomain" yum install -y gitlab-ee

The installation might take some time depending on your internet connection speed a the server-loads. 
You will see the output as shown below after the command finished, don't close the terminal yet because there are still few things to do.

step 6: Configuring Firewall Rules
Now, it's time to configure the Firewall in Rocky Linux. If you run your server behind a firewall, you need to allow http and https traffic because we will use HTTP/HTTPS protocol to access the GitLab web UI. Run the following command to open HTTP and HTTPS ports on your firewall.

rpm -qa firewalld
# expected output: firewalld-0.6.3-2.el7_7.2.noarch

# if not installed, install it
yum install firewalld

# check the status of the service (running and enabled)
systemctl status firewalld

# if the service is not running, start it
systemctl start firewalld

# if the service has exited, restart it(check for error if any)
systemctl restart firewalld

# if the service is not enabled, enable it
systemctl enable firewalld

$ sudo firewall-cmd --permanent --add-service=ssh
$ sudo firewall-cmd --permanent --add-service=http
$ sudo firewall-cmd --permanent --add-service=https
Run the command below to apply new firewall rules.

$ sudo systemctl reload firewalld

sudo cat /etc/gitlab/initial_root_password
reset the password

/etc/hosts

==========$Check Gitlab Status via Command Line $==========
==========================================


So, the command to view the current status of Gitlab’s service is shown below :

$ gitlab-ctl status
$ sudo systemctl --all | grep gitlab
$ sudo systemctl status gitlab-runsvdir.service

==========$ To change the port for your gitlab $==========
===========================================================
refer: https://serverfault.com/questions/585528/set-gitlab-external-web-port-number

Chad Carbert answer still applies but just want to add extra for version 7.0.0.

Open "/etc/gitlab/gitlab.rb" in your text editor where currently I have external_url http://127.0.0.1/ or similar to that. 
I may need to change external_url with dns including port number (eg. 'http://gitlab.com.local:81/') then reconfigure using command "sudo gitlab-ctl reconfigure" Gitlab is now working on port 81.

Step by step:

sudo -e /etc/gitlab/gitlab.rb
Change external_url from yourdomain.com to yourdomain.com:9999
9999 -> Port you want it to run
sudo gitlab-ctl reconfigure

