============== Time caliculation on your linux commands=============
The time command in Linux is used to determine the duration of execution of a command. This command is useful when you want to know the exection time of a command or a script. By default, three times are displayed:

real time – the total execution time. This is the time elapsed between invocation and termination of the command.
user CPU time – the CPU time used by your process.
system CPU time – the CPU time used by the system on behalf of your process.

# time vagrant up
real    0m 51.69s
user    0m 0.00s
sys     0m 0.00s


download preinstalled vm's from https://www.osboxes.org/
and find the credentails for your centos8
https://www.osboxes.org/centos/#centos-8-4-info
Username: osboxes
Password: osboxes.org
Root Account Password: osboxes.org
Guest Tools: Open-VM-Tools Installed
Keyboard Layout: US (Qwerty)
VMware Compatibility: Version 10+

login to existing virtualbox VM
===============Create a shell script for vagrant user and group with ssh configurations===============
==========================================================================
Please refer for the users creation and users home directory creation
https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-create-a-user-on-centos/

$ nano adduser.sh
Paste the code below and save the file.

# Vagrant specific
date > /etc/vagrant_box_build_time

# Add vagrant user /usr/sbin/groupadd vagrant
/usr/sbin/useradd student1
/usr/sbin/useradd vagrant -g vagrant -G wheel
echo "vagrant"|passwd --stdin vagrant
echo "vagrant        ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers.d/vagrant
chmod 0440 /etc/sudoers.d/vagrant

# Installing vagrant keys
mkdir -pm 700 /home/vagrant/.ssh
wget --no-check-certificate 'https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub' -O /home/vagrant/.ssh/authorized_keys
chmod 0600 /home/vagrant/.ssh/authorized_keys
chown -R vagrant /home/vagrant/.ssh

# Customize the message of the day
echo 'Welcome to your Vagrant-built virtual machine.' > /etc/motd

Make the script executable and run it.

chmod +x adduser.sh
./adduser.sh

===============Here's a step by step guide to convert a Virtualbox .ova to a Vagrant box.===============
==========================================================================
List your VMs to find the VM id you want to convert:
$ VBoxManage list vms
"testing" {a3f59eed-b9c5-4a5f-9977-187f8eb8c4d4}

You can now package the .ova VM as Vagrant box:
$ vagrant package --base a3f59eed-b9c5-4a5f-9977-187f8eb8c4d4 --output name-of-your-box.box
$ vagrant package --base 770b0987-00e7-4e4c-86c3-03c7f20732a8 --output centos8.box

note: delete the virtualbox if the virtualbox name is the same

the command vagrant package runs for quite some time before it can creates a Vagrant box. Be faithful and wait.

Add the new box to the list of local Vagrant boxes:
$ vagrant box add new-box-name name-of-your-box.box
$ vagrant box add centos8 /data/vagrantvms/centos8.box

check whether your vagrant box added into your vagrant box list command.
$ vagrant box list

Init, up, ssh and start usign your Vagrant box:
$ vagrant init #Init the new box with a Vagrantfile
$ vagrant init <boxname>
$ vagrant init centos8
$ vagrant up
# Check for machine IP
$ vagrant ssh-config

$ vagrant ssh
And enjoy!

@topplethepat
Tip
topplethepat commented on Sep 4, 2020
The first command worked great, but now with:
vagrant box add new-box-name name-of-your-box.box

I'm getting an error. Do I need to include the path to the new box?

@suniilsync
Tip
suniilsync commented on Sep 26, 2020
The command should be
vagrant box add --name

===============Issues with vagrant up===============
========================

Vagrant was unable to mount VirtualBox shared folders. This is usually
because the filesystem "vboxsf" is not available. This filesystem is
made available via the VirtualBox Guest Additions and kernel module.
Please verify that these guest additions are properly installed in the
guest. This is not a bug in Vagrant and is usually caused by a faulty
Vagrant box. For context, the command attempted was:

mount -t vboxsf -o uid=1001,gid=1001 vagrant /vagrant

The error output from the command was:

mount: /vagrant: unknown filesystem type 'vboxsf'.

solution: vagrant-vbguest plugin has to be installed.

vagrant plugin install vagrant-vbguest #install plugin
vagrant destroy #clean repos
vagrant up #relaunch

i got the below error
Stderr from the command:

umount: /mnt: not mounted.

I have uninstall vagrant-vbguest and install vagrant-vbguest.

vagrant plugin uninstall vagrant-vbguest
vagrant plugin install vagrant-vbguest --plugin-version 0.21
vagrant reload

===============Now the target is to convert vagrantbox to docker container===============
===========================================================
There are therefore 3 main steps to getting into your container:

– Install ShutIt on the server

– Run the ‘copyserver’ ShutIt script

– Run your copyserver Docker image as a container

Step 1
Install ShutIt as root:

sudo su -
pip install shutit
The pre-requisites are python-pip, git and docker. The exact names of these in your package manager may vary slightly (eg docker-io or docker.io) depending on your distro.

You may need to make sure the docker server is running too, eg with ‘systemctl start docker’ or ‘service docker start’.

Step 2
Check out the copyserver script:

git clone https://github.com/ianmiell/shutit_copyserver.git
Step 3
Run the copy_server script:

cd shutit_copyserver/bin
./copy_server.sh
There is a prompt to ask what docker base image you want to use. Make sure you use one as close to the original server as possible.

Step 4
Run the built image:

docker run -ti [username]/copyserver /bin/bash


If none of the above work, send the output of:

./copy_server.sh -l debug --echo
cd /tmp/shutit_copyserver && shutit build --echo -d docker -s repository tag yes -s repository_name copyserver -l DEBUG

================Vagrantfile================
# Vagrant Cheat Sheet

## add image

### ===============local===============

    $ vagrant box add {title} {url}
    $ vagrant init {title}
    $ vagrant up

### ===============public ([publicly available catalog of Vagrant boxes](https://atlas.hashicorp.com/boxes/search))===============

    $ vagrant box add ubuntu/precise64
    $ vagrant init ubuntu/precise64
    $ vagrant up

## ===============connect===============

    $ vagrant ssh {name}

## ===============remove @ virtualbox level===============

    $ vagrant destroy

## ===============remove @ vagrant level===============

    $ vagrant box remove {title}

## ===============list boxes===============

    $ vagrant box list

## ===============provisioning===============

    $ vagrant provision

## ===============export vagrant image===============

run script to compress Ubuntu: https://gist.github.com/carlessanagustin/2fb92e88f2068300a2ed

    $ vagrant package --output package.box

# 2. Vagrantfile cheat sheet

## ===============port forwarding===============

    # host:port >> guest:port
    zipi.vm.network "forwarded_port", host: 8080, guest: 80, auto_correct: true

## ===============mount folders and permissions===============
    zipi.vm.synced_folder ".", "/vagrant",
      owner: "vagrant",
      group: "vagrant",
      mount_options: ["dmode=775,fmode=664"]

## ===============network===============
    zipi.vm.network "private_network",
        ip: "192.168.32.10",
        virtualbox__intnet: true,
        auto_config: true

## ===============provider===============
    config.vm.provider "virtualbox" do |vb|
        vb.memory = 512
        vb.cpus = 1
        #vb.gui = true
    end

## ===============provisioning: inline===============

* Option 1:

```
config.vm.provision "shell", inline: "apt-get update && apt-get -y upgrade"
```

* Option 2:

```
$script = <<SCRIPT
apt-get update
apt-get -y upgrade
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.provision "shell", inline: $script
end
```

## ===============provisioning: shell===============

```
config.vm.provision :shell, :path => "vagrant-bootstrap.sh"
```

## ===============provisioning: ansible===============

    config.vm.provision "ansible" do |ansible|
      ansible.playbook = "provision-ansible/install.yml"
      
      ansible.verbose = 'vvvv'
      
      ansible.host_key_checking = false
      ansible.sudo = true
        
      ansible.tags = ['base', 'ansible']
      #ansible.skip_tags = ''
    
      # STATIC INVENTORY
      #ansible.inventory_path = "provision-ansible/hosts/all"
      #ansible.limit = 'vagrant'
        
      # AUTO-GENERATED INVENTORY
      ansible.groups = {
        "group1" => ["zipi"],
        "all_groups:children" => ["group1"],
        #"group1:vars" => { "vagrant_enable" => true }
      }

      ansible.extra_vars = {
          ansible_ssh_user: 'vagrant',
          vagrant_enable: true
          }
    end

## =============launching 2 machines============

    config.vm.define "zipi" do |zipi|
        zipi.vm.host_name = "zipi"
        zipi.vm.box = "ubuntu/trusty64"
        zipi.vm.network "private_network", ip: "192.168.32.10", virtualbox__intnet:     true, auto_config: true
    end
    config.vm.define "zape" do |zape|
        zape.vm.host_name = "zape"
        zape.vm.box = "ubuntu/trusty64"
        zape.vm.network "private_network", ip: "192.168.32.11", virtualbox__intnet:     true, auto_config: true
    end

==========
Solutions to “vagrant up” Hangs at “ssh auth method private key”

problem statement:
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==> default: Clearing any previously set forwarded ports...
==> default: Fixed port collision for 22 => 2222. Now on port 2200.
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: hostonly
==> default: Forwarding ports...
    default: 22 (guest) => 2200 (host) (adapter 1)
==> default: Running 'pre-boot' VM customizations...
==> default: Booting VM...
==> default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2200
    default: SSH username: vagrant
    default: SSH auth method: private key
	:(
	:(

solution:

Increase timeout
Add this line in your Vagrantfile.

config.vm.boot_timeout = 300
Check network setting
Make sure that your VM has the Cable Connected setting checked. This setting is in Network tab of the VirtualBox GUI.

Virtualbox - Cable Connected

Or simply add the following line in your Vagrantfile to turn Cable Connected on.

config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
end
Turn Hyper-V off
For Windows users only.

Hyper-V is the windows server virtualization that can create virtual machines on x86-64 systems running Windows, and it can not run with VirtualBox together, so we need to turn off it.

First step, find Turn Windows fetures on or off

Move on to Control Panel -> Programs, under Programs and Features section, click the link as shown in the screenshot below.

Turn Windows fetures on or off

Okay, now make sure that "Windows Hyperviosr Platform" is unchecked. Also, "Virtual Machine Platform" is checked.

Turn off Hyper-v

Windows Hyperviosr Platform: Unchecked
Virtual Machine Platform: Checked

Click the OK button and then reboot.

Check BIOS setting
Enable the hardware virtualization in BIOS (VT-x), which is required on Windows OS to run any kind of virtual machine.

Click on VM Preview
Open the VirtualBox UI for the VM your are running, the screenshot may look like this.

Virtualbox GUI

If the GUI is not shown, add gui = true in the Vagrantfile and try again.

config.vm.provider "virtualbox" do |v|
  v.gui = true
end
Click on the Preview window and press Enter key to make system continue to boot. And then you can see the vagrant up going on.

Bug for bionic64
If you are using the box ubuntu/bionic64 and having the same problem. There is a confirmed bug that causes some of the newer Ubuntu boxes to boot slowly, which is causing the SSH timeout. Adding the following settings in your Vagrantfile may help.

config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
    vb.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
end