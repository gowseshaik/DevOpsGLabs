Ubuntu 20.04 system requirements:
2 GHz dual core processor
4 GiB RAM (system memory)
25 GB of hard drive space (or USB stick, memory card or external drive but see LiveCD for an alternative approach)
VGA capable of 1024×768 screen resolution
Either a CD/DVD drive or a USB port for the installer media
Internet access is helpful

Install Docker on Ubuntu:

	sudo su -
	sudo apt-get remove docker docker-engine docker.io containerd runc
	sudo apt-get update
	sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
	sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	sudo apt-get update
	sudo apt-get install -y docker-ce docker-ce-cli containerd.io


once you installed: check with 
# docker info
WARNING: No swap limit support
for the error, please refer: https://debugah.com/solved-docker-info-check-error-warning-no-swap-limit-support-23609/

Solution:
=========
1. Edit the/etc/default/grub file.
At grub_CMDLINE_Linux = "", and add CGroup_enable=memory swapaccount=1

vi /etc/default/grub
GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"

2. Save, update
#  sudo update-grub
3. Restart the server
# sudo reboot
4. Check
# docker info


to configure docker repository path:
C:\ProgramData\Docker\config
daemon.json

{
"graph": "D:\\ProgramData\\Docker"
}

restart docker service.


Test the installation by running a simple container:
        docker run hello-world

	## FYI Only ## Check Available Version for Install"
	apt-cache madison docker-ce | awk '{print $3}'

==================
=============
Note : .docker will not be available, imidiately of docker installation.

for this, The directory .docker (and the file .docker/config.json) will be created when you successfully authenticate to a Docker registry e.g Docker Hub running the command docker login.

(This presupposes $USER is part of the group docker.)

drwx------  2 gana gana 4096 Jul 21 15:42 .docker

if .docker directory not creating: Please follow below steps
============================================================
Manually created the .docker folder using mkdir .docker before restarting though.
mkdir .docker
sudo chown "$USER":"$USER" /home/"$USER"/.docker -R
sudo chmod g+rwx "$HOME/.docker" -R

error:
======
Docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock

solution:
=========
The user jenkins needs to be added to the group docker:

sudo usermod -a -G docker jenkins
Then restart Jenkins.

Edit
If you arrive to this question of stack overflow because you receive this message from docker, but you don't use jenkins, most probably the error is the same: your unprivileged user does not belong to the docker group.

You can do:

sudo usermod -a -G docker [user]
Insert your user name where [user] is.

You can check it was successful by doing grep docker /etc/group and see something like this:

docker:x:998:[user]
in one of the lines.

Then change your users group ID to docker:

newgrp docker
Finally, log out and log in again

refer below links as well:
https://www.blackmoreops.com/2021/10/13/how-to-fix-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket-at-unix-var-run-docker-sock-error/

=========================================================================

Install Docker on CentOS:

	sudo yum install -y device-mapper-persistent-data lvm2
	sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	sudo yum install -y docker-ce docker-ce-cli containerd.io
	sudo systemctl start docker
	sudo systemctl enable docker

Test the installation by running a simple container:
	docker run hello-world

===========================================================================
https://docs.docker.com/engine/install/linux-postinstall/
Add your user to the docker group, giving the user permission to run docker commands:
        sudo usermod -aG docker cloud_user

===========================================================================

Install docker-compose

sudo curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

==============
to uninstall docker-compose

Individual Removal if Installed Using curl

It is commonly installed to /usr/local/bin/docker-compose on macs. However, you can run which docker-compose to find the exact location.

Run the following command (*nix systems) to remove:
rm $(which docker-compose)

If you get a permission denied error then you will need to prepend sudo:
sudo rm $(which docker-compose)

To verify that it was successful, run the following command which should return nothing:
which docker-compose

It should say that the command wasn’t found.



============*Pre-Prod BMS Webapp build EAR Task*============
cd ${bamboo.build.working.directory}
echo $pwd
mkdir  META-INF
ls 
echo "Folder Created"
cp ${bamboo.build.working.directory}/MBI_Business/target/*.jar .



cp ${bamboo.build.working.directory}/MBI/build/PreProd/application.xml META-INF
cd META-INF 
ls
cd ..

cp ${bamboo.build.working.directory}/MBI/target/MBI.war .
jar -cvf BMSEAR.ear MBIBussiness.jar MBI.war
jar -uvf BMSEAR.ear META-INF/application.xml
ls 
echo "EAR Completed"


============*Test2 BMS Webapp build EAR Task[Before]*============

cd ${bamboo.build.working.directory}
echo $pwd
mkdir lib META-INF
ls 
echo "Folder Created"
cp ${bamboo.build.working.directory}/MBI_Business/target/*.jar lib
cd lib 
ls
cd ..
cp ${bamboo.build.working.directory}/MBI/build/Test2/application.xml META-INF
cd META-INF 
ls
cd ..

cp ${bamboo.build.working.directory}/MBI/target/MBI.war .
jar -cvf MBIEAR.ear lib MBI.war
jar -uvf MBIEAR.ear META-INF/application.xml
ls 
echo "EAR Completed"

================(Tagging and Packaging)PreProd-EAR-creation==============
cd ${bamboo.build.working.directory}
echo $pwd
mkdir  META-INF
ls 
echo "Folder Created"
cp ${bamboo.build.working.directory}/MBI_Business/target/*.jar .


cp ${bamboo.build.working.directory}/MBI/build/PreProd/application.xml META-INF
cd META-INF 
ls
cd ..

cp ${bamboo.build.working.directory}/MBI/target/MBI.war .
jar -cvf BMSEAR.ear MBIBussiness.jar MBI.war
jar -uvf BMSEAR.ear META-INF/application.xml
ls 
echo "EAR Completed"

=============(Tagging and Packaging)Test2-EAR-creation[Before]==============
cd ${bamboo.build.working.directory}
echo $pwd
mkdir lib META-INF
ls 
echo "Folder Created"
cp ${bamboo.build.working.directory}/MBI_Business/target/*.jar lib
cd lib 
ls
cd ..
cp ${bamboo.build.working.directory}/MBI/build/Test2/application.xml META-INF
cd META-INF 
ls
cd ..

cp ${bamboo.build.working.directory}/MBI/target/MBI.war .
jar -cvf MBIEAR.ear lib MBI.war
jar -uvf MBIEAR.ear META-INF/application.xml
ls 
echo "EAR Completed"
