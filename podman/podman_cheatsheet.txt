https://podman.io/getting-started


Finding Images:
===============
Command	Description
podman images	List all local images
podman history image:tag	Display information about how an image was built
podman login registryURL -u username [-p password]	Log in to a remote registry
podman pull registry/username/image:tag	Pull an image from a remote registry
podman search searchString	Search local cache and remote registries for images
podman logout	Log out of the current remote registry
The list of registries is defined in /etc/containers/registries.conf

Building Images:
================
Command	Description
podman build -t image:tag .	Build and tag an image using the instructions in Docker?le in the
current directory	
podman build -t image:tag -f Dockerfile2	Same as above, but with a di?erent Docker?le
podman tag image:tag image:tag2	Add an additional name to a local image
podman tag image:tag registry/username/image:tag	Same as above, but the additional name includes a remote registry
podman push registry/username/image:tag	Push an image to a remote registry


Running Containers on Images:
===============================
Command	Description
podman run --rm -it [--name name] image:tag command	Run a container based on a given image.
--rm Remove the container after it exits
-it Connect the container to the terminal
--name name Give the container a name
image:tag The image used to create the container
command A command to run (/bin/bash for example)
-d Run the container in the background
-p 8080:32000 Expose container port 8080 as localhost:32000
-v /var/lib/mydb:/var/lib/db Map the /var/lib/mydb directory on localhost to a volume named /var/lib/db inside the container

Command	Description
podman commit container newImage:tag	Create a new image based on the current state of a running container
podman create [--name name] image:tag	Create (but don’t start) a container from an image
podman start container	Start an existing container from an image
podman restart container	Restart an existing container
podman wait container1 [container2… ]	Wait on one or more containers to stop
podman stop container	Stop a running container gracefully
podman kill container	Send a signal to a running container
podman rm [-f] container	Remove a container (use -f if the container is running)
podman stats container	Display a live stream of a container’s resource usage
podman inspect container	Return metadata (in JSON) about a running container


Working with Container Processes:
=================================
Command	Description
podman ps [--all]	List the running containers on the system (use --all to include non-
running containers)	
podman attach container	Attach to a running container and view its output or control it
+ + detaches from the container but leaves it running.	
podman exec container command	Execute a command in a running container
podman top container	Display the running processes of a container
podman logs [-tail] container	Display the logs of a container
podman pause container / podman unpause container	Pause/unpause all the processes in a container
podman port container	List the port mappings from a container to localhost

Working with the Container Filesystem:
======================================
Command	Description
podman diff container	Display all the changes to a container’s ?lesystem
podman cp source target	Copy ?les and folders between a container and localhost
podman mount container / podman umount container	Mount or unmount a container’s root ?lesystem
podman import tarball	Import a tarball and save it as a ?lesystem image
podman export [-o outputFile] container	Export the container’s ?lesystem to a tar ?le
podman save [-o archiveFile]--format docker-archive	oci-archive
podman load -i archiveFile	Load a saved image from docker-archive or another format

Removing Images:
================
Command	Description
podman rmi [-f] image:tag	Remove a local image from local cache (use -f to force removal)
podman rmi [-f] registry/username/image:tag	Remove a remote image from local cache (use -f to force removal)

Miscellaneous:
==============
Command	Description
podman version	Display podman version information
podman info	Display information about the podman environment

=================
To access container ports on host:
==================================
Use the host network to access the container’s port from the host
Let’s see the host network in action, to see how we can access a service running in a container, from the host.

We’ll use podman run to run a process in a new, rootless container, and add --network=host to attach it to the host network:

podman run --network=host nginxinc/nginx-unprivileged

The Nginx web server is now running on port 8080, inside a container.

(The nginx-unprivileged image is a variation on the standard nginx image, which is configured to run Nginx on an unprivileged port.)

If I go to my web browser on the host and access http://localhost:8080, I’ll see the nginx welcome page:

===================

Create a network with no options

# podman network create
/etc/cni/net.d/cni-podman-4.conflist
Create a network named newnet that uses 192.5.0.0/16 for its subnet.

# podman network create --subnet 192.5.0.0/16 newnet
/etc/cni/net.d/newnet.conflist
Create an IPv6 network named newnetv6, you must specify the subnet for this network, otherwise the command will fail. For this example, we use 2001:db8::/64 for its subnet.

# podman network create --subnet 2001:db8::/64 --ipv6 newnetv6
/etc/cni/net.d/newnetv6.conflist
Create a network named newnet that uses 192.168.33.0/24 and defines a gateway as 192.168.133.3

# podman network create --subnet 192.168.33.0/24 --gateway 192.168.33.3 newnet
/etc/cni/net.d/newnet.conflist
Create a network that uses a 192.168.55.0/24* subnet and has an IP address range of 192.168.55.129 - 192.168.55.254.

# podman network create --subnet 192.168.55.0/24 --ip-range 192.168.55.128/25
/etc/cni/net.d/cni-podman-5.conflist
Create a Macvlan based network using the host interface eth0

# podman network create -d macvlan -o parent=eth0 newnet
/etc/cni/net.d/newnet.conflist
========================
$ podman login docker.io
Username: umohnani
Password:
Login Succeeded!
$ podman login -u testuser -p testpassword localhost:5000
Login Succeeded!
$ podman login --authfile authdir/myauths.json docker.io
Username: umohnani
Password:
Login Succeeded!
$ podman login --tls-verify=false -u test -p test localhost:5000
Login Succeeded!
$ podman login --cert-dir /etc/containers/certs.d/ -u foo -p bar localhost:5000
Login Succeeded!
$ podman login -u testuser  --password-stdin < testpassword.txt docker.io
Login Succeeded!
$ echo $testpassword | podman login -u testuser --password-stdin docker.io
Login Succeeded!
$ podman login quay.io --verbose
Username: myusername
Password:
Used: /run/user/1000/containers/auth.json
Login Succeeded!


==============================
nspecting a running container
You can “inspect” a running container for metadata and details about itself. podman inspect will provide lots of useful information like environment variables, network settings or allocated resources.

Since, the container is running in rootless mode, no IP Address is assigned to the container.

$ podman inspect -l | grep IPAddress
            "IPAddress": "",
Note: The -l is a convenience argument for latest container. You can also use the container’s ID or name instead of -l or the long argument --latest.
============
Running a container
This sample container will run a very basic httpd server that serves only its index page.

$ podman run -dt -p 8080:80/tcp docker.io/library/httpd

============
Viewing the container’s logs
You can view the container’s logs with Podman as well:

$ podman logs -l
===========
Viewing the container’s pids
You can observe the httpd pid in the container with podman top.

$ podman top -l
=========
You may stop the container:

$ podman stop -l
==========
Finally, you can remove the container:

$ podman rm -l
====================
Checkpointing the container:
Checkpointing a container stops the container while writing the state of all processes in the container to disk. With this a container can later be restored and continue running at exactly the same point in time as the checkpoint. This capability requires CRIU 3.11 or later installed on the system.

To checkpoint the container use:

$ sudo podman container checkpoint <container_id>
========================
Restoring the container:
Restoring a container is only possible from a previously checkpointed container. The restored container will continue to run at exactly the same point in time it was checkpointed.

To restore the container use:

$ sudo podman container restore <container_id>

============
Migrating the container:
To live migrate a container from one host to another the container is checkpointed on the source system of the migration, transferred to the destination system and then restored on the destination system. When transferring the checkpoint, it is possible to specify an output-file.

On the source system:

$ sudo podman container checkpoint <container_id> -e /tmp/checkpoint.tar.gz
$ scp /tmp/checkpoint.tar.gz <destination_system>:/tmp
On the destination system:

$ sudo podman container restore -i /tmp/checkpoint.tar.gz

====================
podman --help | more
podman image --help
podman search ubi:latest | more
podman pull registry.accesss.redhat.com/ubi8/ubi
podman image list
podman images
podman inspect ubi | more
podman image inspect ubi | more
podman tag ubi:latest ubi8
podman ps -a
podman login localhost:5000
username: registryuser
password: 
podman tag registry.access.redhat.com/ubi8/ubi:latest localhost:5000/ubi8/ubi
podman images
podman push localhost:5000/ubi8/ubi:latest
curl -u registryuser https://localhost:5000/v2/_catalog
podamn untag ubi8
podman images
podman rmi <imageID>
podman image list
podman logout localhost:5000
===============
skopeo

skopeo --version
skopeo --help | more
skopeo inspect --help
man skopeo
podman pull registry.access.edhat.com/ubi7/ubi:latest
skopeo login localhost:5000
to copy one images from one repository to another:
skopeo copy docker://registry.access.redhat.com/ubi7/ubi:latest docker://localhost:5000/ubi7/ubi:latest
to sync one image from one source to another
skopeo sync --src docker --dest docker --scoped registry.access.redhat.com/ubi7/ubi:latest localhost:5000/ubi7/ubi
skopeo inspect docker://localhost:5000/ubi7/ubi:latest
skopeo list-tags docker://localhost:5000/ubi8/ubi
podman search localhost:5000/ubi
skopeo logout localhost:5000

podman ps -a
sudo podman ps -a
podman images
podman search httpd-24 | more
podman run -dt docker.io/centos/httpd-24-centos8
podman ps -a
podman images


cat /etc/redhat-release
podman ps -a
podman exec -it relaxe_greider /bin/bash
cat /etc/redhat-release
curl http://localhost:8000
curl http://localhost:8000
podman ps -a
podman stop relaxe_greider
podman ps -a
podman rm relaxe_greider
podman ps -a
podman rmi httpd-24-centos8:latest
podman images
podman system
podman events
podman healthcheck
podman create
podman exec
podman kill
podman pause/unpause
podman run
podman stop/start/restart
podman container
podman restart <containerID> ; podman ps -a
podman create -t -name mynginx docker.io/library/nginx
podman start mynginx
sudo podman run -dt --name rootubi8 registry.access.redhat.com/ubi8
sudo podman ps -a
sudo podman puase rootubi8
sudo podman unpause rootubi8
podman container --help | more
podman container start
podman ps -a
podman container start wizardly_elion
podman exec -it myniginx /bin/bash
sudo podman exec rootubi8 cat /etc/redhat-release
podman stop -a
podman rm -a
podman ps -a
sudo podman stop -a
sudo podman rm -a
sudo podman ps -a
podman images
podman rmi -a
podman images
sudo podman images
sudo podman rmi -a
sudo podman images

Adding persistance storage using podman
1. shared directory
2. shared container volume
podman run with -v
podman volume
podman cp

1. using a shared directory
podman ps -a
mkdir ~/html
echo Testfile! > ~/html/test1.txt
cat ~/html/test1.txt
podman search nginx
lets create a 3 nginx containers
podman run -dt --name web1 -v ~/html:/usr/share/nginx/html:z docker.io/library/nginx
podman run -dt --name web2 -v ~/html:/usr/share/nginx/html:z docker.io/library/nginx
podman run -dt --name web3 -v ~/html:/usr/share/nginx/html:z docker.io/library/nginx

podman ps -a
podman exec web1 curl -s http://localhost:80/test1.txt
Testfile!
podman exec web2 curl -s http://localhost:80/test1.txt
Testfile!
podman exec web3 curl -s http://localhost:80/test1.txt
Testfile!

lets create a Test2.txt
cat ~/html/test2.txt
echo A second testfile! > ~/html/test2.txt

podman exec web1 curl -s http://localhost:80/test2.txt
A second testfile!
podman exec web2 curl -s http://localhost:80/test2.txt
A second testfile!
podman exec web3 curl -s http://localhost:80/test2.txt
A second testfile!

podman stop -a
podman rm -a

podman volume create webvol
podman volume ls
podman run -dt --name web1 -v webvol:/usr/share/nginx/html docker.io/library/nginx
podman run -dt --name web2 -v webvol:/usr/share/nginx/html docker.io/library/nginx
podman run -dt --name web2 -v webvol:/usr/share/nginx/html docker.io/library/nginx

podman ps -a
podman exec web1 ls -al /usr/share/nginx/html

podman cp ~/html/test1.txt web1:/usr/share/nginx/html
podman cp ~/html/test1.txt web2:/usr/share/nginx/html
podman cp ~/html/test1.txt web3:/usr/share/nginx/html

podman exec web1 ls -al /usr/share/nginx/html

podman exec web1 curl -s http://localhost:80/test1.txt
podman exec web2 curl -s http://localhost:80/test1.txt
podman exec web3 curl -s http://localhost:80/test1.txt

podman stop -a
podman rm -a

Managing Network Container

attaching / dettaching networks
# podman run -dt --name web1 -p 8080:80 nginx
# podman port -a

podman network
podman port
podman inspect

podman run -dt --name web1 --publish-all nginx
podman ps -a
curl http://localhost:45773

podman port -a
podman run -dt --name web1 -p 8080:80 nginx
podman run -dt --name web2 -p 8081:80 nginx
podman ps -a
curl http://localhost:8080
curl http://localhost:8081
podman stop -a
podman rm -a
podman rmi imageID

sudo su -

# podman network ls
podman network inspect podman | more
podman port -a
podman inspect rootweb1 | grep IPAddress

curl http://10.88.0.2

podman network create test-net
podman network ls
podman network connect test-net rootweb1
podman inspect rootweb1 | grep IPAddress
curl http://10.89.0.2

podman network disconnect test-net rootweb1
podman network ls
podman network rm test-net
podman network ls

Monitoring Containers using podman
1. healthchecks

- Command to be executed
- no.of retries
- Interval to run the healthcheck
- start-period for the container
- Timeout for the command

- systemd timers(default)
- cron(default)

using
- podman system
- podman events

podman run
podman inspect
podman healthcheck
podman events
podman system

podman run -dt --name nginx1 --health-cmd 'curl http://localhost || exit 1' --health-interval=0 nginx
podman ps -a
podman healthcheck run nginx
echo $?
0
echo $?
1 --> if it is one, then there is an issue in healthcheck command(privious command).
podman run -dt --name myubi7 --health-cmd 'grep 8 /etc/redhat-realese | exit1' --health-inteval=0 ubi7:latest
podman healthcheck run myubi7
echo $?
unhealthy
podman system --help
podman system df
podman system df -v
podman system purne -a
podman events --help
podman events --since 10m
podman events --since 15m --filter event=prune

understanding pods

whats a pod , how pod's will work
A pod is a one or more containers with shared resources and a specification for how to run the containers. which will use in kubernetes.

pod:
shared port bindings, cgroup-parent values, and kernet namespaces
once pod is created, these attributes cant be changed --must recreate the pod with changes.
each container has its own instance of conmon
Allows podman to run in detached mode.
Holds the namespaces associated with the pod.
Allows podman to connect other containers to the pod
defualt infro container is based on the K8s.gcr.io/pause image
Your regular containers with your applications 
can communicate with other containers in the pod using shared network namespace.

podman create
podman rm
podman prune
podman commands to create destroy and clean up unused resources
port are published at the pod level, not the container level
say we want to deploy a pod with an nginx container, along with a mariadb container.
- The mariadb container will not be accessed outside the pod.
- The nginx container needs to be published to port 8081

1. we deploy a pod, which contains all infra container. by default and 8081 on host and 80 on container.

2. we deploy the nginx container.which will run on 80 port 

create a first pod.
wordpress pod
	- place for our containers
	- publish port 80 to 8080
wordpress container
	- Provides workpress application
	- Application available via published port (8080:80)
mariaDB container
	- Database for wordpress
	- Not available outside of pod

podman pod
podman run
podman ps

podman ps -a --pod
podman pod ps

podman pod create --name wp-pod -p 8080:80
podman pod ps
1.)
podman ps -a --pod --> its a infra container
2.)
podman run -d --restart=always --pod=wp-pod -e MYSQL_ROOT_PASSWORD="dbpass" -e MYSQL_DATABASE="wp" -e MYSQL_USER="wordpress" -e MYSQL_PASSWORD="wppass" --name=wp-db mariadb
3.)
podman run -d --restart=alway --pod=wp-pod -e WORDPRESS_DB_NAME="wp" -e WORDPRESS_DB_USER="wordpress" -e WORDPRESS_DB_PASSWORD="wppass" -e WORDPRESS_DB_HOST="127.0.0.1" --name wb-web wordpress

podman ps -a --pod
curl -s http://localhost:8080
echo $?
0

Managing pods using podman

- managing rootless pods
- managing rootfull pods

podman pod
podman ps

rootless pods:
podman pod ps
podman ps -a --pod
podman pod stop wp-pod
podman pod start wp-pod
podman ps -a --pod
podman pod restart wp-pod
podman ps -a --pod
podman pod inspect wp-pod | more
podman pod top wp-pd

rootfull pods:
sudo -i
podman pod create --name root-pod -p 8081:80
podman pod ps
podman ps -a --pod
podman run -d --restart=always --pod=root-pod -e MYSQL_ROOT_PASSWORD="dbpass" -e MYSQL_DATABSE="rootdb" -e MYSQL_PASSORD="dbapass" --name=root-db mariadb

podman run -d --restart=always --pod=root-pod --name root-web nginx

podman ps -a --pod

curl -s http://localhost:8081
podman pod pause root-pod
podman ps -a --pod
podman pod ps
podman pod unpause root-pod
podman ps -a --pod
podman pod stats root-pod
podman pod stop root-pod
podman system df
podman pod prune
podman system df
podman ps -a --pod
podman pod ps
exit

podman ps -a --pod
podman pod ps
podman pod stop wp-pod
podman pod ps -a
podman pod rm wp-pod
podman pod ps
podman system prune -a
podman system df

Creating Containers Images using Buildah:










==================
http://www.dark-hamster.com/operating-system/how-to-setup-local-image-repository-with-podman-in-linux-centos-8/


